<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chakfong.github.io</id>
    <title>Chak Fong</title>
    <updated>2020-05-29T07:10:16.588Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chakfong.github.io"/>
    <link rel="self" href="https://chakfong.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chakfong.github.io/images/avatar.png</logo>
    <icon>https://chakfong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Chak Fong</rights>
    <entry>
        <title type="html"><![CDATA[AOP中切点的execution表达式]]></title>
        <id>https://chakfong.github.io/post/aop-zhong-qie-dian-de-execution-biao-da-shi</id>
        <link href="https://chakfong.github.io/post/aop-zhong-qie-dian-de-execution-biao-da-shi">
        </link>
        <updated>2020-05-29T06:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>任意公共方法的执行：<br>
execution(public * *(..))<br>
<em>public可以省略, 第一个 * 代表方法的任意返回值 第二个 * 代表任意方法 (..)代表任意参数</em></p>
<p>任何参数类型为PBRequest的方法的执行：<br>
execution(* *(PBRequest))</p>
<p>任何参数类型为PBRequest和Client的方法的执行：<br>
execution(* *(PBRequest,Client))</p>
<p>任何一个以“set”开始的方法的执行：<br>
execution(* set*(..)</p>
<p>UserService接口的任意方法：<br>
execution(* com.demo.web.UserService.*(..))</p>
<p>定义在com.demo.web包里的任意方法的执行：<br>
execution(* com.demo.web.<em>.</em>(..))<br>
第一个 .* 代表任意类, 第二个 .* 代表人以方法</p>
<p>定义在web包和所有子包里的任意类的任意方法的执行：<br>
execution(* com.demo.web..<em>.</em>(..))<br>
<em>..* 代表任意包或者子包</em></p>
<p>定义在com.demo包和所有子包里的UserService类的任意方法的执行：<br>
execution(* com.demo..UserService.*(..))&quot;)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[寻Bug(乌龙)记——Rpc框架的小插曲]]></title>
        <id>https://chakfong.github.io/post/xun-bugwu-long-ji-rpc-kuang-jia-de-xiao-cha-qu</id>
        <link href="https://chakfong.github.io/post/xun-bugwu-long-ji-rpc-kuang-jia-de-xiao-cha-qu">
        </link>
        <updated>2019-12-11T08:56:47.000Z</updated>
        <summary type="html"><![CDATA[<p>一场大乌龙引发的RPC框架探索</p>
]]></summary>
        <content type="html"><![CDATA[<p>一场大乌龙引发的RPC框架探索</p>
<!-- more -->
<h3 id="背景">背景</h3>
<p>同事最近写了个Bug，Rpc暴露的接口是这样的。</p>
<pre><code>@MessageMapping(type = PBMessageType.TEST)
fun test(req: String, @Ann param: String)
</code></pre>
<p>一切看起来都很正常，结果请求到达参数解析这里就出错了。</p>
<h3 id="过程">过程</h3>
<p>调用方法只传入第一个参数，标注了@Ann注解的param则经过特殊处理并注入。经过Debug后发现，由于param参数没有能够被正确的解析，导致该参数被当成普通的参数进行反序列化。进而把参数数据反序列化为错误的数据类型，最终得到错误的参数数组，于是就报了过界的错误。</p>
<pre><code>java.lang.IndexOutOfBoundsException: Index: 0
</code></pre>
<p>在Debug过程中，发现param参数根本获取不到我的方法注解@Ann。</p>
<pre><code>Parameter param = metadata.getParameter();
if(param.isAnnotationPresent(Ann.class))
</code></pre>
<p>isAnnotationPresent方法返回false，进去代码后，最终定位到一个Method方法中</p>
<pre><code>public Annotation[][] getParameterAnnotations() {
    return sharedGetParameterAnnotations(parameterTypes, parameterAnnotations);
}
</code></pre>
<p>由于Method.getParameterAnotations方法的调用方method实例中的parameterAnnotations为null，因此param参数找不到Ann注解，而method实例又是param对象中的executable成员对象。</p>
<p>于是接下来的思路就是找到这个RPC服务端中的param参数来源，为何丢失Ann注解。</p>
<p>为此我梳理了下项目框架中注册消息控制器的过程，当Spring加载处理完Bean后，从上下文中扫描所有注解了@MessageController的消息控制器，并保存注册所有的Handler及元数据。当RPC请求过来时，根据请求的消息类型，从Handler的Map中得到对应的Handler和元数据，此时就可以根据元数据来对参数进行推断和反序列化。最后由代理对象来调用方法。</p>
<p>因此问题定位到扫描消息控制器这里。</p>
<pre><code>applicationContext.getBeansWithAnnotation(MessageController.class).values()
</code></pre>
<p>@MessageController注解是个Spring Component，标注给注解的类都将会被Spring扫描。<br>
于是首先从标注了@MessageController的类下手，找到该类下的所有标注@MessageMapping的Handler注册。<br>
而RPC消息控制器为了给暴露出来的接口指定消息类型，可以在接口上打上注解，在Spring扫描到RpcService类后，获取接口RpcService中的方法的注解。</p>
<p>看到这里不觉想到@Inherited这个注解，可惜的是，这个注解只能实现子类获取父类中类上的注解，它是类之间的注解继承关系，与接口无关，更与类中方法无关。而类中的方法能不能获取到父类方法的注解主要在于有没有重写，若重写了方法，那么调用方调用的是子类的方法，必然获取不到注解，而如果子类没有重写父类方法，那么调用方调用的是父类的方法，还是可以获取到注解。因此这个在Rpc接口中并起不了作用。</p>
<blockquote>
<p>Note that this meta-annotation type has no effect if<br>
the annotated type is used to annotate anything other than a class. <br>
Note also that this meta-annotation only causes annotations to be<br>
inherited from superclasses; annotations on implemented<br>
interfaces have no effect.</p>
</blockquote>
<p>方法总是有的，可以从RpcService类往上递归搜索所有的父类及接口，获得一个完整的继承结构，便能拿到RpcServer接口中的方法签名及注解了。</p>
<h3 id="原因">原因</h3>
<p>既然能通过继承结构获得接口中方法注解，那同理也能获取参数注解。结果元数据里保存的Method是通过Spring加载的RpcService中拿到的，而不是RpcServer接口中的Method。</p>
<p>于是，找了这么久的Bug，原来是个乌龙。。。只因为实现方法中，param参数没有添加@Ann注解。任我在接口中参数注解加得花里胡哨，也毫无影响。</p>
<pre><code>override fun test(req: PBIntValue, param: String) {    
    println(param)    
    return PBIntValue.newBuilder().setValue(200).build()
}
</code></pre>
<p>而注解应该打在实现方法中，而不是在接口，可能这是为了符合热插拔式？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客入驻！我有新Logo啦]]></title>
        <id>https://chakfong.github.io/post/bo-ke-ru-zhu-wo-you-xin-logo-la</id>
        <link href="https://chakfong.github.io/post/bo-ke-ru-zhu-wo-you-xin-logo-la">
        </link>
        <updated>2019-12-10T10:20:13.000Z</updated>
        <summary type="html"><![CDATA[<p>📢 如题，博客入驻！！我有新Logo啦！！</p>
]]></summary>
        <content type="html"><![CDATA[<p>📢 如题，博客入驻！！我有新Logo啦！！</p>
<!-- more -->
<p>今天在WordPress博客发布了一篇文章，结果似乎违反了某条服务条款，把我的网站封停了！<br>
<img src="https://chakfong.github.io/post-images/1575973383596.png" alt=""></p>
<p>之前一直想找到地方写写博客记录一些笔记，既然WordPress不留人，自有留人处，最终决定用Github托管我的个人博客，并且用的是Gridea搭建工具，傻瓜式操作，快速构建。</p>
<figure data-type="image" tabindex="1"><img src="https://chakfong.github.io/post-images/1575973976850.png" alt=""></figure>
<p>看着Gridea搭建自带的LOGO，感觉差点意思，于是灵感突发。可以，这个LOGO不错，可惜下一秒就是我的翻版了。</p>
<p><img src="https://chakfong.github.io/post-images/1575974080175.png" alt="" width="200" height="200"><br>
粗略设计了下自己的Logo，提出站名chakfong的两个首字母C和F，配上高级灰底色，简单组合，就先这样吧，完美。（逃</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker安装及使用]]></title>
        <id>https://chakfong.github.io/post/docker-an-zhuang-ji-shi-yong</id>
        <link href="https://chakfong.github.io/post/docker-an-zhuang-ji-shi-yong">
        </link>
        <updated>2019-12-10T07:55:39.000Z</updated>
        <summary type="html"><![CDATA[<p>Docker是实现操作系统虚拟化的一种工具，它用到了『容器』这一个重要的概念。在了解『容器』之前，先看看与之类似的『虚拟机』这一概念，如以前使用过的VMware这一类的虚拟机，它每创建一个独立的虚拟环境时，都将占用宿主机预先分配给他的系统硬件资源。这种情况下，如果运行多个虚拟环境时，很容易造成系统资源的浪费和分配的不平衡，因为虚拟环境之间的资源分配是静态的。<br>
而『容器』创建的虚拟环境则与宿主机共享硬件资源及操作系统，实现了多个虚拟环境之间的动态资源分配。同时，通过容器，我们可以方便的对应用程序进行打包、配置、上传及部署。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Docker是实现操作系统虚拟化的一种工具，它用到了『容器』这一个重要的概念。在了解『容器』之前，先看看与之类似的『虚拟机』这一概念，如以前使用过的VMware这一类的虚拟机，它每创建一个独立的虚拟环境时，都将占用宿主机预先分配给他的系统硬件资源。这种情况下，如果运行多个虚拟环境时，很容易造成系统资源的浪费和分配的不平衡，因为虚拟环境之间的资源分配是静态的。<br>
而『容器』创建的虚拟环境则与宿主机共享硬件资源及操作系统，实现了多个虚拟环境之间的动态资源分配。同时，通过容器，我们可以方便的对应用程序进行打包、配置、上传及部署。</p>
<!-- more -->
<h2 id="安装">安装</h2>
<p>使用脚本安装</p>
<pre><code> curl -fsSL get.docker.com -o get-docker.sh
 sh get-docker.sh --mirror Aliyun
</code></pre>
<h2 id="修改镜像源">修改镜像源</h2>
<p>由于国内拉取hub.docker.com的镜像资源比较慢，可使用阿里云镜像源，配置方法如下：</p>
<p>创建文件 <strong>/etc/docker/daemon.json</strong>，并编辑如下</p>
<pre><code>{
  &quot;registry-mirrors&quot;: [
    &quot;https://registry.docker-cn.com&quot;
  ]
}
</code></pre>
<p>重启服务</p>
<pre><code>systemctl daemon-reload
systemctl restart docker
</code></pre>
<h2 id="相关命令">相关命令</h2>
<p><strong>拉取镜像</strong></p>
<pre><code>    docker pull 仓库名[:标签名]
</code></pre>
<p><strong>查看镜像</strong></p>
<pre><code>    docker images
</code></pre>
<p><strong>删除镜像</strong></p>
<pre><code>    docker image rm &lt;image_id/repository:tag&gt;
</code></pre>
<p><strong>启动容器</strong></p>
<pre><code>    docker run [opt] [repository:tag]
</code></pre>
<p><strong>以交互方式运行容器中指定命令</strong></p>
<pre><code>    docker run -it &lt;repository:tag&gt; &lt;command&gt;
</code></pre>
<p><strong>映射端口</strong></p>
<pre><code>    docker run -p &lt;宿主机端口:容器端口&gt; &lt;repository:tag&gt;
</code></pre>
<p><strong>进入容器</strong></p>
<pre><code>    docker exec it &lt;image_id&gt; &lt;command&gt;
</code></pre>
<p><strong>清除虚悬镜像或已终止的容器</strong></p>
<pre><code>    docker image|container prune
</code></pre>
<p><strong>删除容器</strong></p>
<pre><code>    docker rm &lt;container_id&gt;
</code></pre>
<p><strong>构建镜像</strong></p>
<pre><code>    docker build -t &lt;repository:tag&gt; &lt;URL&gt;
</code></pre>
<blockquote>
<p>构建镜像时，Docker客户端将指定URL作为镜像构建上下文传输到Docker服务器当中构建。</p>
</blockquote>
<p><strong>拷贝容器中文件至宿主机中</strong></p>
<pre><code>    docker cp &lt;宿主URL:容器URL&gt;
</code></pre>
<p><strong>查看容器中断日志</strong></p>
<pre><code>    docker logs -f &lt;容器名&gt;
</code></pre>
<h2 id="部署springboot项目">部署SpringBoot项目</h2>
<h4 id="拉取openjdk镜像">拉取OpenJDK镜像</h4>
<pre><code>docker pull openjdk:8u212-jre-alpine
</code></pre>
<p>在 <strong>/usr/local/docker/myapp</strong> 中创建Dockerfile</p>
<pre><code>FROM openjdk:8u212-jre-alpine

WORKDIR /usr/local/myapp

COPY ./*.jar /usr/local/myapp/app.jar

CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;app.jar&quot;]
</code></pre>
<h4 id="构建镜像">构建镜像</h4>
<p>将你的项目jar包放到 /usr/local/docker/myapp 下，并执行命令</p>
<pre><code>    docker build -t &lt;repository_name&gt; .
</code></pre>
<h4 id="运行容器">运行容器</h4>
<p>以守护态运行容器</p>
<pre><code>    docker run --name &lt;container_name&gt; -d -p 8080:8080 &lt;repository_name&gt;
</code></pre>
<h2 id="部署mysql">部署Mysql</h2>
<h4 id="拉取mysql镜像">拉取mysql镜像</h4>
<pre><code>docker pull mysql:5.7
</code></pre>
<h4 id="运行mysql容器并使用数据卷共享宿主机文件">运行mysql容器，并使用数据卷共享宿主机文件</h4>
<pre><code>docker run -p 3306:3306 --name mysql \
-v /usr/local/docker/mysql/logs:/var/log/mysql \
-v /usr/local/docker/mysql/data:/var/lib/mysql \
-v /usr/local/docker/mysql/conf:/etc/mysql \
-e MYSQL_ROOT_PASSWORD=123456 \
-d mysql:5.7
</code></pre>
<p>可以看出，每次运行一个mysql容器就要输入这么多命令，神仙也记不住，下面介绍如果使用Docker-Compose来构建和管理容器。</p>
<h2 id="使用docker-compose">使用Docker Compose</h2>
<p>Docker Compose实现对Docker容器集群的快速编排。<br>
每次执行一个容器要输入大量的配置命令，且一个web项目需要开启多个容器互相配合，使用Docker Client来启动容器会十分繁琐。<br>
而Docker Compose允许用户通过一个 docker-compose.yml 模板文件来定义一组相关联的应用容器为一个项目。</p>
<h4 id="docker-compose安装">Docker Compose安装</h4>
<p>使用二进制包安装。</p>
<pre><code>curl -L https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
</code></pre>
<p><strong>可能报错：</strong></p>
<pre><code>Cannot open self /usr/local/bin/docker-compose or archive /usr/local/bin/docker-compose.pkg
</code></pre>
<p><strong>解决方法：</strong><br>
前往github releases下载最新版本，放到 <strong>/usr/local/bin</strong> 中，并添加执行权限</p>
<pre><code>https://github.com/docker/compose/releases
</code></pre>
<h4 id="使用docker-compose部署mysql">使用Docker Compose部署Mysql</h4>
<p>在 <strong>/usr/local/mysql</strong> 下创建模板文件 <strong>docker-compose.yml</strong></p>
<pre><code>version: '3'
services:
  mysql:
    restart: always
    image: mysql:5.7
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 123456
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --max_allowed_packet=128M
      --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot;
    volumes:
      - &quot;/usr/local/docker/mysql/data:/var/lib/mysql&quot;
      - &quot;/usr/local/docker/mysql/logs:/var/log/mysql&quot;
      - &quot;/usr/local/docker/mysql/conf:/etc/mysql&quot;
</code></pre>
<p>配置好之后，只需要输入以下命令，以守护态启动容器。</p>
<pre><code>docker-compose up -d
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java8新特性——函数式接口]]></title>
        <id>https://chakfong.github.io/post/java8-xin-te-xing-han-shu-shi-jie-kou</id>
        <link href="https://chakfong.github.io/post/java8-xin-te-xing-han-shu-shi-jie-kou">
        </link>
        <updated>2019-12-10T07:44:58.000Z</updated>
        <summary type="html"><![CDATA[<p>在Java8之前，想做到传递一个函数或者一个行为非常的不容易。为了做到回调这种效果，以前的做法是创建并传入一个匿名内部类变量，写一大段与行为无关的代码，非常的繁琐。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在Java8之前，想做到传递一个函数或者一个行为非常的不容易。为了做到回调这种效果，以前的做法是创建并传入一个匿名内部类变量，写一大段与行为无关的代码，非常的繁琐。</p>
<!-- more -->
<pre><code>    list.sort(new Comparator&lt;Integer&gt;() {
        @Override
        public int compare(Integer o1, Integer o2) {
            return 0;
        }
    })
</code></pre>
<p>而在Java8，有了函数式接口之后，可以大大的简化代码的编写，达到一样的效果。</p>
<pre><code>        list.sort((o1, o2) -&gt; o1 - o2);
</code></pre>
<p>为什么可以达到这种效果呢？<br>
正是由于 Comparator这个接口在Java8之后，就成为了一个函数式接口，而lambda表达式又是实现函数式接口的其中一种方式。</p>
<p>先回顾一下函数式接口javadoc的几点事项：</p>
<ol>
<li>一个接口拥有且仅有一个抽象方法。</li>
<li>如果接口中重写了Object类中的抽象方法，这些抽象方法不参与第一点的判断。</li>
<li>可以使用lamdba表达式、方法引用、构造方法引用来创建函数式接口的一个实例。</li>
</ol>
<p>有了第三点，显然我们可以使用lamdba表达式来创建函数式接口的一个实例，从而代替了以前声明一个匿名内部类变量的做法。</p>
<p>有了函数式接口之后，用来创建这个接口实例的lambda表达式肯定不能乱写呀，它的入参和返回类型在冥冥之中显然受到了某种约束！ 这种约束其实就在于函数式接口那唯一的抽象方法之中。</p>
<pre><code>    int compare(T o1, T o2);
</code></pre>
<p>可以看到，Comparator函数式接口中的抽象方法compare中需要两个入参和一个int类型的返回类型。那么我们创建接口实例的方式就可以写为lambda表达式：</p>
<pre><code>    (T o1, T o2) -&gt; (int) ...
</code></pre>
<p>这样，我们就实现了compare这个抽象方法，至于在List.sort这个方法中如何调用compare这个方法，已经脱离函数式接口这个范畴了，所以这部分的实现在Java7或Java8都是一样的。关键是搞清楚lambda表达式在函数式接口中做到了什么事情、起到了什么作用。</p>
<p>当然了，lambda表达式只是其中的一种方式，除了lambda表达式之外，还有方法引用和构造方法引用。</p>
<h3 id="高阶函数">高阶函数</h3>
<p>如果一个方法，接收一个函数式接口作为参数、或者是返回一个函数式接口，那么这个方法就称为高阶函数。</p>
<p>举个例子，在Iterable接口中有一个默认方法叫forEach，它接收一个Consumer<T>的函数式接口，返回void，因此forEach成为高阶函数。</p>
<pre><code>    default void forEach(Consumer&lt;? super T&gt; action) {
        Objects.requireNonNull(action);
        for (T t : this) {
            action.accept(t);
        }
    }
</code></pre>
<p>在forEach这个方法中，通过iterator遍历容器，并对每个元素执行Consumer接口的抽象方法 accept。</p>
<pre><code>public interface Consumer&lt;T&gt; {
    void accept(T t);
}
</code></pre>
<p>因此，如果我们要做到为容器每个元素执行某种操作的效果，就可以使用forEach这个方法，并传入一个Consumer函数式接口的一个实现，即一段行为的具体操作。</p>
<h3 id="方法引用">方法引用</h3>
<p>方法引用可以看作一种特殊的lambda表达式，如果你要描述的行为恰好有现成的一个方法时，可以直接使用该方法的方法引用，达到创建函数式接口实例的作用。<br>
需要注意的是，方法引用与方法调用是完全两回事，它指的是一个函数指针，而不是具体的一个调用。本质上，还是用来描述如何创建一个函数式接口的实例。</p>
<p>回顾下方法引用，主要分为四种。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>引用静态方法</td>
<td>className::staticMethodName</td>
</tr>
<tr>
<td>引用对象的实例方法</td>
<td>instanceName::instanceMethodName</td>
</tr>
<tr>
<td>引用类的实例方法</td>
<td>className::instanceMethodName</td>
</tr>
<tr>
<td>引用构造方法</td>
<td>className::new</td>
</tr>
</tbody>
</table>
<p>在使用方法引用的时候，Java会根据上下文来断定该方法引用映射到哪一个函数式接口上。</p>
<p>常见的两种断定情景如下：</p>
<pre><code>    // 『 :: 』 这个符号对应了声明类型Consumer
    Consumer consumer = System.out::println;
    // 『 :: 』 这个符号对应了forEach方法的参数类型Consumer
    arr.forEach(System.out::println); 
</code></pre>
<p>当『方法引用』 用来赋值接口的时候，它的入参个数、类型和返回类型需要与所声明函数式接口的抽象方法相对应。<br>
当『方法引用』 作为参数传入高阶函数时，它的入参个数、类型和返回类型需要与高阶函数的函数式接口参数的抽象方法相对应。</p>
<p>除了『引用类的实例方法』之外，其他类型的方法引用中，它引用的方法的参数与函数式接口的抽象方法参数的个数和顺序保持相同。且它的参数类型和返回类型必须为函数式接口抽象方法的同类或者是『父类』。</p>
<p>例如，由于函数式接口Consumer的抽象方法accept 接收一个参数，不返回值，而System.out的println方法也是接收一个参数，不返回值，因此我们可以使用println这个方法引用来赋值给Consumer，或者是作为Consumer类型的参数进行传递。</p>
<p>需要注意的是，如果方法引用使用的是『引用类的实例方法』，它会把实例方法的调用对象作为函数式接口抽象方法的第一个参数。</p>
<p>例如，String的实例方法toUpperCase方法是个无入参的实例方法，但它作为『引用类的实例方法』的方法引用时，可以赋值给『一个入参』的Function函数式接口，却无法赋值给『无入参』的Supplier接口。这是由于toUpperCase方法作为『引用类的实例方法』的方法引用时，它会将调用者对象作为Function的第一个参数。</p>
<blockquote>
<pre><code>   public String toUpperCase() {
       return （String）…… ;
   }
</code></pre>
</blockquote>
<pre><code>        // 使用『引用对象的实例方法』
        Supplier&lt;String&gt; sup = &quot;instance&quot;::toUpperCase;
        // 使用『引用类的实例方法』
        Function&lt;String, String&gt; fun = String::toUpperCase;
</code></pre>
<p>可以看出，对于同一个方法，不同的引用方式，所创建的函数式接口可能是不同的。</p>
<h3 id="构造方法引用">构造方法引用</h3>
<p>构造方法引用是方法引用的其中一种，由于构造方法没有方法名，所以拼写方法引用的时候使用『new』作为第三个部分，比如，</p>
<pre><code>        Supplier&lt;String&gt; supInstance = String::new;
        Function&lt;String, String&gt; funInstance = String::new;
        Function&lt;char[], String&gt; funCharInstance = String::new;
</code></pre>
<p>同样地，Java根据上下文来断定方法引用所创建的是哪一个函数式接口实例。</p>
<p>当使用Supplier声明变量时，该『方法引用』引用的是『无参数』的构造方法。<br>
当使用Function声明变量时，该『方法引用』引用的是『一个参数』的构造方法。<br>
此外，Function接口声明的参数泛型使得『方法引用』指向具体的重载方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://chakfong.github.io/post/hello-gridea</id>
        <link href="https://chakfong.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>